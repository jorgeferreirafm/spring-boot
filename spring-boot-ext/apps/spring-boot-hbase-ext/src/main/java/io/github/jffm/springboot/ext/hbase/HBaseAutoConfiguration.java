package io.github.jffm.springboot.ext.hbase;

import org.apache.hadoop.hbase.HBaseConfiguration;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
@ConditionalOnClass(HBaseConfiguration.class)
@EnableConfigurationProperties(HBaseProperties.class)
public class HBaseAutoConfiguration {

	@Autowired
	private HBaseProperties hbaseProperties;

	@Bean
	@ConditionalOnMissingBean
	public org.apache.hadoop.conf.Configuration hbaseConfiguration() {
		org.apache.hadoop.conf.Configuration configuration = org.apache.hadoop.hbase.HBaseConfiguration.create();
		applyIfNotNull(configuration, HBaseProperties.PROP_DFS_CLIENT_READ_SHORTCIRCUIT, hbaseProperties.getDfs().getClient().getRead().getShortcircuit());
		applyIfNotNull(configuration, HBaseProperties.PROP_DFS_DOMAIN_SOCKET_PATH, hbaseProperties.getDfs().getDomain().getSocket().getPath());
		applyIfNotNull(configuration, HBaseProperties.PROP_HADOOP_POLICY_FILE, hbaseProperties.getHadoop().getPolicy().getFile());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_AUTH_KEY_UPDATE_INTERVAL, hbaseProperties.getHbase().getAuth().getKey().getUpdate().getInterval());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_AUTH_TOKEN_MAX_LIFETIME, hbaseProperties.getHbase().getAuth().getToken().getMax().getLifetime());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_BALANCER_PERIOD, hbaseProperties.getHbase().getBalancer().getPeriod());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_BUCKETCACHE_BUCKET_SIZES, hbaseProperties.getHbase().getBucketcache().getBucket().getSizes());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_BUCKETCACHE_COMBINEDCACHE_ENABLED, hbaseProperties.getHbase().getBucketcache().getCombinedcache().getEnabled());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_BUCKETCACHE_IOENGINE, hbaseProperties.getHbase().getBucketcache().getIoengine());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_BUCKETCACHE_SIZE, hbaseProperties.getHbase().getBucketcache().getSize());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_BULKLOAD_RETRIES_NUMBER, hbaseProperties.getHbase().getBulkload().getRetries().getNumber());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_CELLS_SCANNED_PER_HEARTBEAT_CHECK, hbaseProperties.getHbase().getCells().getScanned().getPer().getHeartbeat().getCheck());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_CLIENT_KEYVALUE_MAXSIZE, hbaseProperties.getHbase().getClient().getKeyvalue().getMaxsize());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_CLIENT_LOCALITYCHECK_THREADPOOLSIZE, hbaseProperties.getHbase().getClient().getLocalityCheck().getThreadPoolSize());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_CLIENT_MAX_PERREGION_TASKS, hbaseProperties.getHbase().getClient().getMax().getPerregion().getTasks());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_CLIENT_MAX_PERSERVER_TASKS, hbaseProperties.getHbase().getClient().getMax().getPerserver().getTasks());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_CLIENT_MAX_TOTAL_TASKS, hbaseProperties.getHbase().getClient().getMax().getTotal().getTasks());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_CLIENT_OPERATION_TIMEOUT, hbaseProperties.getHbase().getClient().getOperation().getTimeout());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_CLIENT_PAUSE, hbaseProperties.getHbase().getClient().getPause());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_CLIENT_PAUSE_CQTBE, hbaseProperties.getHbase().getClient().get_pause().getCqtbe());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_CLIENT_PERSERVER_REQUESTS_THRESHOLD, hbaseProperties.getHbase().getClient().getPerserver().getRequests().getThreshold());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_CLIENT_RETRIES_NUMBER, hbaseProperties.getHbase().getClient().getRetries().getNumber());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_CLIENT_SCANNER_CACHING, hbaseProperties.getHbase().getClient().getScanner().getCaching());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_CLIENT_SCANNER_MAX_RESULT_SIZE, hbaseProperties.getHbase().getClient().getScanner().getMax().getResult().getSize());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_CLIENT_SCANNER_TIMEOUT_PERIOD, hbaseProperties.getHbase().getClient().getScanner().getTimeout().getPeriod());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_CLIENT_WRITE_BUFFER, hbaseProperties.getHbase().getClient().getWrite().getBuffer());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_CLUSTER_DISTRIBUTED, hbaseProperties.getHbase().getCluster().getDistributed());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_COLUMN_MAX_VERSION, hbaseProperties.getHbase().getColumn().getMax().getVersion());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_COORDINATED_STATE_MANAGER_CLASS, hbaseProperties.getHbase().getCoordinated().getState().getManager().get_class());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_COPROCESSOR_ABORTONERROR, hbaseProperties.getHbase().getCoprocessor().getAbortonerror());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_COPROCESSOR_ENABLED, hbaseProperties.getHbase().getCoprocessor().getEnabled());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_COPROCESSOR_MASTER_CLASSES, hbaseProperties.getHbase().getCoprocessor().getMaster().getClasses());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_COPROCESSOR_REGION_CLASSES, hbaseProperties.getHbase().getCoprocessor().getRegion().getClasses());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_COPROCESSOR_USER_ENABLED, hbaseProperties.getHbase().getCoprocessor().getUser().getEnabled());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_DATA_UMASK, hbaseProperties.getHbase().getData().getUmask());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_DATA_UMASK_ENABLE, hbaseProperties.getHbase().getData().getUmask().getEnable());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_DEFAULTS_FOR_VERSION, hbaseProperties.getHbase().getDefaults().get_for().getVersion());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_DEFAULTS_FOR_VERSION_SKIP, hbaseProperties.getHbase().getDefaults().get_for().getVersion().getSkip());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_DFS_CLIENT_READ_SHORTCIRCUIT_BUFFER_SIZE, hbaseProperties.getHbase().getDfs().getClient().getRead().getShortcircuit().getBuffer().getSize());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_DISPLAY_KEYS, hbaseProperties.getHbase().getDisplay().getKeys());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_DYNAMIC_JARS_DIR, hbaseProperties.getHbase().getDynamic().getJars().getDir());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_FS_TMP_DIR, hbaseProperties.getHbase().getFs().getTmp().getDir());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_HREGION_MAJORCOMPACTION, hbaseProperties.getHbase().getHregion().getMajorcompaction());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_HREGION_MAJORCOMPACTION_JITTER, hbaseProperties.getHbase().getHregion().getMajorcompaction().getJitter());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_HREGION_MAX_FILESIZE, hbaseProperties.getHbase().getHregion().getMax().getFilesize());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_HREGION_MEMSTORE_BLOCK_MULTIPLIER, hbaseProperties.getHbase().getHregion().getMemstore().getBlock().getMultiplier());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_HREGION_MEMSTORE_FLUSH_SIZE, hbaseProperties.getHbase().getHregion().getMemstore().getFlush().getSize());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_HREGION_MEMSTORE_MSLAB_ENABLED, hbaseProperties.getHbase().getHregion().getMemstore().getMslab().getEnabled());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_HREGION_PERCOLUMNFAMILYFLUSH_SIZE_LOWER_BOUND_MIN, hbaseProperties.getHbase().getHregion().getPercolumnfamilyflush().getSize().getLower().getBound().getMin());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_HREGION_PRECLOSE_FLUSH_SIZE, hbaseProperties.getHbase().getHregion().getPreclose().getFlush().getSize());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_HSTORE_BLOCKINGSTOREFILES, hbaseProperties.getHbase().getHstore().getBlockingStoreFiles());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_HSTORE_BLOCKINGWAITTIME, hbaseProperties.getHbase().getHstore().getBlockingWaitTime());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_HSTORE_BYTES_PER_CHECKSUM, hbaseProperties.getHbase().getHstore().getBytes().getPer().getChecksum());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_HSTORE_CHECKSUM_ALGORITHM, hbaseProperties.getHbase().getHstore().getChecksum().getAlgorithm());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_HSTORE_COMPACTION_KV_MAX, hbaseProperties.getHbase().getHstore().getCompaction().getKv().getMax());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_HSTORE_COMPACTION_MAX, hbaseProperties.getHbase().getHstore().getCompaction().getMax());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_HSTORE_COMPACTION_MAX_SIZE, hbaseProperties.getHbase().getHstore().getCompaction().getMax().getSize());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_HSTORE_COMPACTION_MIN, hbaseProperties.getHbase().getHstore().getCompaction().getMin());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_HSTORE_COMPACTION_MIN_SIZE, hbaseProperties.getHbase().getHstore().getCompaction().getMin().getSize());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_HSTORE_COMPACTION_RATIO, hbaseProperties.getHbase().getHstore().getCompaction().getRatio());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_HSTORE_COMPACTION_RATIO_OFFPEAK, hbaseProperties.getHbase().getHstore().getCompaction().getRatio().getOffpeak());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_HSTORE_COMPACTIONTHRESHOLD, hbaseProperties.getHbase().getHstore().getCompactionThreshold());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_HSTORE_FLUSHER_COUNT, hbaseProperties.getHbase().getHstore().getFlusher().getCount());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_HSTORE_TIME_TO_PURGE_DELETES, hbaseProperties.getHbase().getHstore().getTime().getTo().getPurge().getDeletes());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_HTTP_FILTER_INITIALIZERS, hbaseProperties.getHbase().getHttp().getFilter().getInitializers());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_HTTP_MAX_THREADS, hbaseProperties.getHbase().getHttp().getMax().getThreads());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_HTTP_STATICUSER_USER, hbaseProperties.getHbase().getHttp().getStaticuser().getUser());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_IPC_CLIENT_FALLBACK_TO_SIMPLE_AUTH_ALLOWED, hbaseProperties.getHbase().getIpc().getClient().getFallbackToSimpleAuthAllowed());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_IPC_CLIENT_TCPNODELAY, hbaseProperties.getHbase().getIpc().getClient().getTcpnodelay());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_IPC_SERVER_CALLQUEUE_HANDLER_FACTOR, hbaseProperties.getHbase().getIpc().getServer().getCallqueue().getHandler().getFactor());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_IPC_SERVER_CALLQUEUE_READ_RATIO, hbaseProperties.getHbase().getIpc().getServer().getCallqueue().getRead().getRatio());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_IPC_SERVER_CALLQUEUE_SCAN_RATIO, hbaseProperties.getHbase().getIpc().getServer().getCallqueue().getScan().getRatio());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_IPC_SERVER_FALLBACK_TO_SIMPLE_AUTH_ALLOWED, hbaseProperties.getHbase().getIpc().getServer().getFallbackToSimpleAuthAllowed());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_LEASE_RECOVERY_DFS_TIMEOUT, hbaseProperties.getHbase().getLease().getRecovery().getDfs().getTimeout());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_LEASE_RECOVERY_TIMEOUT, hbaseProperties.getHbase().getLease().getRecovery().getTimeout());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_LOCAL_DIR, hbaseProperties.getHbase().getLocal().getDir());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_MASTER_BALANCER_MAXRITPERCENT, hbaseProperties.getHbase().getMaster().getBalancer().getMaxRitPercent());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_MASTER_HFILECLEANER_PLUGINS, hbaseProperties.getHbase().getMaster().getHfilecleaner().getPlugins());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_MASTER_INFO_BINDADDRESS, hbaseProperties.getHbase().getMaster().getInfo().getBindAddress());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_MASTER_INFO_PORT, hbaseProperties.getHbase().getMaster().getInfo().getPort());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_MASTER_INFOSERVER_REDIRECT, hbaseProperties.getHbase().getMaster().getInfoserver().getRedirect());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_MASTER_KERBEROS_PRINCIPAL, hbaseProperties.getHbase().getMaster().getKerberos().getPrincipal());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_MASTER_KEYTAB_FILE, hbaseProperties.getHbase().getMaster().getKeytab().getFile());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_MASTER_LOADBALANCER_CLASS, hbaseProperties.getHbase().getMaster().getLoadbalancer().get_class());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_MASTER_LOGCLEANER_PLUGINS, hbaseProperties.getHbase().getMaster().getLogcleaner().getPlugins());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_MASTER_LOGCLEANER_TTL, hbaseProperties.getHbase().getMaster().getLogcleaner().getTtl());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_MASTER_MOB_TTL_CLEANER_PERIOD, hbaseProperties.getHbase().getMaster().getMob().getTtl().getCleaner().getPeriod());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_MASTER_NORMALIZER_CLASS, hbaseProperties.getHbase().getMaster().getNormalizer().get_class());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_MASTER_PORT, hbaseProperties.getHbase().getMaster().getPort());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_MOB_CACHE_EVICT_PERIOD, hbaseProperties.getHbase().getMob().getCache().getEvict().getPeriod());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_MOB_CACHE_EVICT_REMAIN_RATIO, hbaseProperties.getHbase().getMob().getCache().getEvict().getRemain().getRatio());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_MOB_COMPACTION_BATCH_SIZE, hbaseProperties.getHbase().getMob().getCompaction().getBatch().getSize());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_MOB_COMPACTION_CHORE_PERIOD, hbaseProperties.getHbase().getMob().getCompaction().getChore().getPeriod());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_MOB_COMPACTION_MERGEABLE_THRESHOLD, hbaseProperties.getHbase().getMob().getCompaction().getMergeable().getThreshold());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_MOB_COMPACTION_THREADS_MAX, hbaseProperties.getHbase().getMob().getCompaction().getThreads().getMax());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_MOB_COMPACTOR_CLASS, hbaseProperties.getHbase().getMob().getCompactor().get_class());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_MOB_DELFILE_MAX_COUNT, hbaseProperties.getHbase().getMob().getDelfile().getMax().getCount());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_MOB_FILE_CACHE_SIZE, hbaseProperties.getHbase().getMob().getFile().getCache().getSize());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_NORMALIZER_PERIOD, hbaseProperties.getHbase().getNormalizer().getPeriod());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_OFFPEAK_END_HOUR, hbaseProperties.getHbase().getOffpeak().getEnd().getHour());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_OFFPEAK_START_HOUR, hbaseProperties.getHbase().getOffpeak().getStart().getHour());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_PROCEDURE_MASTER_CLASSES, hbaseProperties.getHbase().getProcedure().getMaster().getClasses());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_PROCEDURE_REGIONSERVER_CLASSES, hbaseProperties.getHbase().getProcedure().getRegionserver().getClasses());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_REGION_REPLICA_REPLICATION_ENABLED, hbaseProperties.getHbase().getRegion().getReplica().getReplication().getEnabled());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_REGIONS_SLOP, hbaseProperties.getHbase().getRegions().getSlop());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_REGIONSERVER_CHECKSUM_VERIFY, hbaseProperties.getHbase().getRegionserver().getChecksum().getVerify());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_REGIONSERVER_DNS_INTERFACE, hbaseProperties.getHbase().getRegionserver().getDns().get_interface());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_REGIONSERVER_DNS_NAMESERVER, hbaseProperties.getHbase().getRegionserver().getDns().getNameserver());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_REGIONSERVER_GLOBAL_MEMSTORE_SIZE, hbaseProperties.getHbase().getRegionserver().getGlobal().getMemstore().getSize());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_REGIONSERVER_GLOBAL_MEMSTORE_SIZE_LOWER_LIMIT, hbaseProperties.getHbase().getRegionserver().getGlobal().getMemstore().getSize().getLower().getLimit());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_REGIONSERVER_HANDLER_ABORT_ON_ERROR_PERCENT, hbaseProperties.getHbase().getRegionserver().getHandler().getAbort().getOn().getError().getPercent());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_REGIONSERVER_HANDLER_COUNT, hbaseProperties.getHbase().getRegionserver().getHandler().getCount());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_REGIONSERVER_HLOG_READER_IMPL, hbaseProperties.getHbase().getRegionserver().getHlog().getReader().getImpl());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_REGIONSERVER_HLOG_WRITER_IMPL, hbaseProperties.getHbase().getRegionserver().getHlog().getWriter().getImpl());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_REGIONSERVER_HOSTNAME, hbaseProperties.getHbase().getRegionserver().getHostname());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_REGIONSERVER_INFO_BINDADDRESS, hbaseProperties.getHbase().getRegionserver().getInfo().getBindAddress());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_REGIONSERVER_INFO_PORT, hbaseProperties.getHbase().getRegionserver().getInfo().getPort());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_REGIONSERVER_INFO_PORT_AUTO, hbaseProperties.getHbase().getRegionserver().getInfo().getPort().getAuto());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_REGIONSERVER_KERBEROS_PRINCIPAL, hbaseProperties.getHbase().getRegionserver().getKerberos().getPrincipal());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_REGIONSERVER_KEYTAB_FILE, hbaseProperties.getHbase().getRegionserver().getKeytab().getFile());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_REGIONSERVER_LOGROLL_ERRORS_TOLERATED, hbaseProperties.getHbase().getRegionserver().getLogroll().getErrors().getTolerated());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_REGIONSERVER_LOGROLL_PERIOD, hbaseProperties.getHbase().getRegionserver().getLogroll().getPeriod());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_REGIONSERVER_MAJORCOMPACTION_PAGECACHE_DROP, hbaseProperties.getHbase().getRegionserver().getMajorcompaction().getPagecache().getDrop());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_REGIONSERVER_MINORCOMPACTION_PAGECACHE_DROP, hbaseProperties.getHbase().getRegionserver().getMinorcompaction().getPagecache().getDrop());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_REGIONSERVER_MSGINTERVAL, hbaseProperties.getHbase().getRegionserver().getMsginterval());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_REGIONSERVER_OPTIONALCACHEFLUSHINTERVAL, hbaseProperties.getHbase().getRegionserver().getOptionalcacheflushinterval());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_REGIONSERVER_PORT, hbaseProperties.getHbase().getRegionserver().getPort());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_REGIONSERVER_REGION_SPLIT_POLICY, hbaseProperties.getHbase().getRegionserver().getRegion().getSplit().getPolicy());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_REGIONSERVER_REGIONSPLITLIMIT, hbaseProperties.getHbase().getRegionserver().getRegionSplitLimit());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_REGIONSERVER_STOREFILE_REFRESH_PERIOD, hbaseProperties.getHbase().getRegionserver().getStorefile().getRefresh().getPeriod());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_REGIONSERVER_THREAD_COMPACTION_THROTTLE, hbaseProperties.getHbase().getRegionserver().getThread().getCompaction().getThrottle());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_REGIONSERVER_THRIFT_COMPACT, hbaseProperties.getHbase().getRegionserver().getThrift().getCompact());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_REGIONSERVER_THRIFT_FRAMED, hbaseProperties.getHbase().getRegionserver().getThrift().getFramed());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_REGIONSERVER_THRIFT_FRAMED_MAX_FRAME_SIZE_IN_MB, hbaseProperties.getHbase().getRegionserver().getThrift().getFramed().getMax_frame_size_in_mb());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_REPLICATION_RPC_CODEC, hbaseProperties.getHbase().getReplication().getRpc().getCodec());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_REPLICATION_SOURCE_MAXTHREADS, hbaseProperties.getHbase().getReplication().getSource().getMaxthreads());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_REST_CSRF_ENABLED, hbaseProperties.getHbase().getRest().getCsrf().getEnabled());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_REST_FILTER_CLASSES, hbaseProperties.getHbase().getRest().getFilter().getClasses());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_REST_PORT, hbaseProperties.getHbase().getRest().getPort());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_REST_READONLY, hbaseProperties.getHbase().getRest().getReadonly());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_REST_SUPPORT_PROXYUSER, hbaseProperties.getHbase().getRest().getSupport().getProxyuser());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_REST_THREADS_MAX, hbaseProperties.getHbase().getRest().getThreads().getMax());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_REST_THREADS_MIN, hbaseProperties.getHbase().getRest().getThreads().getMin());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_REST_CSRF_BROWSER_USERAGENTS_REGEX, hbaseProperties.getHbase().getRestCsrf().getBrowserUseragentsRegex());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_ROOTDIR, hbaseProperties.getHbase().getRootdir());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_ROOTDIR_PERMS, hbaseProperties.getHbase().getRootdir().getPerms());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_RPC_SHORTOPERATION_TIMEOUT, hbaseProperties.getHbase().getRpc().getShortoperation().getTimeout());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_RPC_TIMEOUT, hbaseProperties.getHbase().getRpc().getTimeout());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_RS_CACHEBLOCKSONWRITE, hbaseProperties.getHbase().getRs().getCacheblocksonwrite());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_SECURITY_AUTHENTICATION, hbaseProperties.getHbase().getSecurity().getAuthentication());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_SECURITY_EXEC_PERMISSION_CHECKS, hbaseProperties.getHbase().getSecurity().getExec().getPermission().getChecks());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_SECURITY_VISIBILITY_MUTATIONS_CHECKAUTHS, hbaseProperties.getHbase().getSecurity().getVisibility().getMutations().getCheckauths());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_SERIAL_REPLICATION_WAITINGMS, hbaseProperties.getHbase().getSerial().getReplication().getWaitingMs());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_SERVER_COMPACTCHECKER_INTERVAL_MULTIPLIER, hbaseProperties.getHbase().getServer().getCompactchecker().getInterval().getMultiplier());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_SERVER_KEYVALUE_MAXSIZE, hbaseProperties.getHbase().getServer().getKeyvalue().getMaxsize());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_SERVER_SCANNER_MAX_RESULT_SIZE, hbaseProperties.getHbase().getServer().getScanner().getMax().getResult().getSize());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_SERVER_THREAD_WAKEFREQUENCY, hbaseProperties.getHbase().getServer().getThread().getWakefrequency());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_SERVER_VERSIONFILE_WRITEATTEMPTS, hbaseProperties.getHbase().getServer().getVersionfile().getWriteattempts());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_SNAPSHOT_ENABLED, hbaseProperties.getHbase().getSnapshot().getEnabled());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_SNAPSHOT_MASTER_TIMEOUT_MILLIS, hbaseProperties.getHbase().getSnapshot().getMaster().getTimeout().getMillis());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_SNAPSHOT_REGION_TIMEOUT, hbaseProperties.getHbase().getSnapshot().getRegion().getTimeout());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_SNAPSHOT_RESTORE_FAILSAFE_NAME, hbaseProperties.getHbase().getSnapshot().getRestore().getFailsafe().getName());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_SNAPSHOT_RESTORE_TAKE_FAILSAFE_SNAPSHOT, hbaseProperties.getHbase().getSnapshot().getRestore().getTake().getFailsafe().getSnapshot());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_STATUS_LISTENER_CLASS, hbaseProperties.getHbase().getStatus().getListener().get_class());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_STATUS_MULTICAST_ADDRESS_IP, hbaseProperties.getHbase().getStatus().getMulticast().getAddress().getIp());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_STATUS_MULTICAST_ADDRESS_PORT, hbaseProperties.getHbase().getStatus().getMulticast().getAddress().getPort());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_STATUS_PUBLISHED, hbaseProperties.getHbase().getStatus().getPublished());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_STATUS_PUBLISHER_CLASS, hbaseProperties.getHbase().getStatus().getPublisher().get_class());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_STORESCANNER_PARALLEL_SEEK_ENABLE, hbaseProperties.getHbase().getStorescanner().getParallel().getSeek().getEnable());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_STORESCANNER_PARALLEL_SEEK_THREADS, hbaseProperties.getHbase().getStorescanner().getParallel().getSeek().getThreads());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_SUPERUSER, hbaseProperties.getHbase().getSuperuser());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_TABLE_LOCK_ENABLE, hbaseProperties.getHbase().getTable().getLock().getEnable());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_TABLE_MAX_ROWSIZE, hbaseProperties.getHbase().getTable().getMax().getRowsize());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_THRIFT_MAXQUEUEDREQUESTS, hbaseProperties.getHbase().getThrift().getMaxQueuedRequests());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_THRIFT_MAXWORKERTHREADS, hbaseProperties.getHbase().getThrift().getMaxWorkerThreads());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_THRIFT_MINWORKERTHREADS, hbaseProperties.getHbase().getThrift().getMinWorkerThreads());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_TMP_DIR, hbaseProperties.getHbase().getTmp().getDir());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_WAL_DIR_PERMS, hbaseProperties.getHbase().getWal().getDir().getPerms());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_ZOOKEEPER_DNS_INTERFACE, hbaseProperties.getHbase().getZookeeper().getDns().get_interface());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_ZOOKEEPER_DNS_NAMESERVER, hbaseProperties.getHbase().getZookeeper().getDns().getNameserver());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_ZOOKEEPER_LEADERPORT, hbaseProperties.getHbase().getZookeeper().getLeaderport());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_ZOOKEEPER_PEERPORT, hbaseProperties.getHbase().getZookeeper().getPeerport());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_ZOOKEEPER_PROPERTY_CLIENTPORT, hbaseProperties.getHbase().getZookeeper().getProperty().getClientPort());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_ZOOKEEPER_PROPERTY_DATADIR, hbaseProperties.getHbase().getZookeeper().getProperty().getDataDir());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_ZOOKEEPER_PROPERTY_INITLIMIT, hbaseProperties.getHbase().getZookeeper().getProperty().getInitLimit());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_ZOOKEEPER_PROPERTY_MAXCLIENTCNXNS, hbaseProperties.getHbase().getZookeeper().getProperty().getMaxClientCnxns());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_ZOOKEEPER_PROPERTY_SYNCLIMIT, hbaseProperties.getHbase().getZookeeper().getProperty().getSyncLimit());
		applyIfNotNull(configuration, HBaseProperties.PROP_HBASE_ZOOKEEPER_QUORUM, hbaseProperties.getHbase().getZookeeper().getQuorum());
		applyIfNotNull(configuration, HBaseProperties.PROP_HFILE_BLOCK_BLOOM_CACHEONWRITE, hbaseProperties.getHfile().getBlock().getBloom().getCacheonwrite());
		applyIfNotNull(configuration, HBaseProperties.PROP_HFILE_BLOCK_CACHE_SIZE, hbaseProperties.getHfile().getBlock().getCache().getSize());
		applyIfNotNull(configuration, HBaseProperties.PROP_HFILE_BLOCK_INDEX_CACHEONWRITE, hbaseProperties.getHfile().getBlock().getIndex().getCacheonwrite());
		applyIfNotNull(configuration, HBaseProperties.PROP_HFILE_FORMAT_VERSION, hbaseProperties.getHfile().getFormat().getVersion());
		applyIfNotNull(configuration, HBaseProperties.PROP_HFILE_INDEX_BLOCK_MAX_SIZE, hbaseProperties.getHfile().getIndex().getBlock().getMax().getSize());
		applyIfNotNull(configuration, HBaseProperties.PROP_IO_STOREFILE_BLOOM_BLOCK_SIZE, hbaseProperties.getIo().getStorefile().getBloom().getBlock().getSize());
		applyIfNotNull(configuration, HBaseProperties.PROP_ZOOKEEPER_RECOVERY_RETRY_MAXSLEEPTIME, hbaseProperties.getZookeeper().getRecovery().getRetry().getMaxsleeptime());
		applyIfNotNull(configuration, HBaseProperties.PROP_ZOOKEEPER_SESSION_TIMEOUT, hbaseProperties.getZookeeper().getSession().getTimeout());
		applyIfNotNull(configuration, HBaseProperties.PROP_ZOOKEEPER_ZNODE_ACL_PARENT, hbaseProperties.getZookeeper().getZnode().getAcl().getParent());
		applyIfNotNull(configuration, HBaseProperties.PROP_ZOOKEEPER_ZNODE_PARENT, hbaseProperties.getZookeeper().getZnode().getParent());		
		return configuration;
	}
	
	protected void applyIfNotNull(org.apache.hadoop.conf.Configuration configuration, String prop ,Object value){
		if(value != null){
			configuration.set(prop, value.toString());
		}
	}

}